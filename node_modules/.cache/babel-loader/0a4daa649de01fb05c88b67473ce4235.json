{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tgfis\\\\Desktop\\\\Coding\\\\Projects\\\\BlackJack\\\\ClickyMcClick\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tgfis\\\\Desktop\\\\Coding\\\\Projects\\\\BlackJack\\\\ClickyMcClick\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tgfis\\\\Desktop\\\\Coding\\\\Projects\\\\BlackJack\\\\ClickyMcClick\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tgfis\\\\Desktop\\\\Coding\\\\Projects\\\\BlackJack\\\\ClickyMcClick\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tgfis\\\\Desktop\\\\Coding\\\\Projects\\\\BlackJack\\\\ClickyMcClick\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\tgfis\\\\Desktop\\\\Coding\\\\Projects\\\\BlackJack\\\\ClickyMcClick\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport CardList from \"./components/cardlist\";\nimport Controls from \"./components/controls\";\nimport GameMessage from \"./components/gamemessage\";\nimport shuffle from \"./components/shuffle\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.shuffle = function (a) {\n      var k,\n          t,\n          j,\n          i = a.length,\n          rand = Math.random; // For each element in the array, swap it with a random\n      // element (which might be itself)\n\n      while (i--) {\n        k = rand() * (i + 1) | 0;\n        t = a[k];\n        a[k] = a[i];\n        a[i] = t;\n      }\n\n      return a;\n    };\n\n    _this.checkDeck = function (deck) {\n      return _this.state.deck.length < 10 ? deck.concat(shuffle(cards)) : deck;\n    };\n\n    _this.calcCards = function () {\n      _this.setState({\n        dealerTotal: _this.calcCardTotal(_this.state.dealerCards, false),\n        dealerTotalAlt: _this.calcCardTotal(_this.state.dealerCards, true),\n        playerTotal: _this.calcCardTotal(_this.state.playerCards, false),\n        playerTotalAlt: _this.calcCardTotal(_this.state.playerCards, true)\n      });\n    };\n\n    _this.calcCardTotal = function (cards, eleven) {\n      var sum = Object.keys(cards).reduce(function (total, card) {\n        var cardVal = Number(cards[card].cardValue);\n        cardVal = cardVal == 1 && eleven ? 11 : cardVal;\n        return Number(total) + cardVal;\n      }, 0);\n      return sum;\n    };\n\n    _this.drawCards = function (deck, playerCards, numberOfCards) {\n      var i;\n\n      for (i = 1; i <= numberOfCards; i++) {\n        var card = deck.pop();\n        playerCards.push(card);\n      }\n\n      return playerCards;\n    };\n\n    _this.checkForBust = function () {\n      var t1,\n          t2,\n          min,\n          status = \"\";\n      t1 = _this.calcCardTotal(_this.state.playerCards, false);\n      t2 = _this.calcCardTotal(_this.state.playerCards, true);\n      min = Math.min(t1, t2);\n\n      if (min > 21) {\n        status = \"Player Bust!!!\";\n      }\n\n      _this.setState({\n        gameMsg: status\n      });\n    };\n\n    _this.makeBet = function (betVal) {\n      _this.setState(function (prevState) {\n        return {\n          bet: prevState.bet + betVal,\n          chips: prevState.chips - betVal\n        };\n      });\n    };\n\n    _this.clearBet = function () {\n      _this.setState(function (prevState) {\n        return {\n          bet: 0,\n          chips: prevState.chips + prevState.bet\n        };\n      });\n    };\n\n    _this.dealClicked = function () {\n      var deck = _this.checkDeck(_this.state.deck);\n\n      var dealerCards = _this.state.dealerCards;\n      var playerCards = _this.state.playerCards;\n      if (_this.state.bet === 0) return;\n\n      _this.drawCards(deck, dealerCards, 2);\n\n      _this.drawCards(deck, playerCards, 2);\n\n      _this.setState(function (prevState) {\n        return {\n          deck: deck,\n          dealerCards: dealerCards,\n          playerCards: playerCards,\n          isPlaying: true\n        };\n      }, _this.calcCards());\n    };\n\n    _this.hitClicked = function () {\n      var deck = _this.checkDeck(_this.state.deck);\n\n      var playerCards = _this.state.playerCards;\n\n      _this.drawCards(deck, playerCards, 1);\n\n      _this.setState(function (prevState) {\n        return {\n          playerCards: playerCards,\n          deck: deck\n        };\n      }, _this.calcCards(), _this.checkForBust());\n    };\n\n    _this.checkDealerStatus = function (dealerCards, playerTotal) {\n      var t1,\n          t2,\n          status = \"\";\n      t1 = _this.calcCardTotal(dealerCards, false);\n      t2 = _this.calcCardTotal(dealerCards, true);\n\n      if (Math.min(t1, t2) > 21) {\n        status = \"Player Wins!!!\";\n      } else if (t1 <= 21 && t1 == playerTotal || t2 <= 21 && t2 == playerTotal) {\n        status = \"Push\";\n      } else if (t1 <= 21 && t1 > playerTotal || t2 <= 21 && t2 > playerTotal) {\n        status = \"Dealer wins!!!\";\n      }\n\n      return status;\n    };\n\n    _this.stayClicked = function () {\n      //Draw dealer cards until value equals or is higher then user.\n      var playerTotal = Math.max(_this.state.playerTotal, _this.state.playerTotalAlt);\n      if (playerTotal > 21) playerTotal = Math.min(_this.state.playerTotal, _this.state.playerTotalAlt);\n\n      var deck = _this.checkDeck(_this.state.deck);\n\n      var dealerCards = _this.state.dealerCards;\n\n      var status = _this.checkDealerStatus(dealerCards, playerTotal);\n\n      if (status == \"\") {\n        do {\n          _this.drawCards(deck, dealerCards, 1);\n\n          status = _this.checkDealerStatus(dealerCards, playerTotal);\n        } while (status == \"\");\n      }\n\n      _this.setState(function (prevState) {\n        return {\n          deck: deck,\n          dealerCards: dealerCards,\n          gameMsg: status\n        };\n      }, _this.calcCards());\n    };\n\n    _this.resetGame = function () {\n      var chips = _this.state.chips;\n      var bet = _this.state.bet;\n      debugger; //Calculate chips\n\n      if (_this.state.gameMsg === \"Push\") {\n        chips = chips + bet;\n      } else if (_this.state.gameMsg === \"Player Wins!!!\") {\n        chips = chips + bet * 2;\n      }\n\n      _this.setState({\n        deck: [],\n        dealerTotal: 0,\n        dealerTotalAlt: 0,\n        dealerCards: [],\n        playerTotal: 0,\n        playerTotalAlt: 0,\n        playerCards: [],\n        isPlaying: false,\n        bet: 0,\n        chips: chips,\n        gameMsg: null\n      });\n    };\n\n    _this.state = {\n      deck: [],\n      dealerTotal: 0,\n      dealerTotalAlt: 0,\n      dealerCards: [],\n      playerTotal: 0,\n      playerTotalAlt: 0,\n      playerCards: [],\n      bet: 0,\n      chips: 1000,\n      isPlaying: false,\n      gameMsg: null\n    };\n    return _this;\n  } // if less then 10 cards left suffle a new deck\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(CardList, {\n        cardDisplay: \"Dealer:\",\n        cardTotal: this.state.dealerTotal,\n        cardTotalAlt: this.state.dealerTotalAlt,\n        cards: this.state.dealerCards,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }), React.createElement(CardList, {\n        cardDisplay: \"Player:\",\n        cardTotal: this.state.playerTotal,\n        cardTotalAlt: this.state.playerTotalAlt,\n        cards: this.state.playerCards,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }), React.createElement(Controls, {\n        bet: this.state.bet,\n        chips: this.state.chips,\n        isPlaying: this.state.isPlaying,\n        makeBet: this.makeBet,\n        dealClicked: this.dealClicked,\n        hitClicked: this.hitClicked,\n        stayClicked: this.stayClicked,\n        clearBet: this.clearBet,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }), this.state.gameMsg ? React.createElement(GameMessage, {\n        msg: this.state.gameMsg,\n        resetClicked: this.resetGame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }) : false);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\tgfis\\Desktop\\Coding\\Projects\\BlackJack\\ClickyMcClick\\src\\App.js"],"names":["React","Component","CardList","Controls","GameMessage","shuffle","cards","App","props","a","k","t","j","i","length","rand","Math","random","checkDeck","deck","state","concat","calcCards","setState","dealerTotal","calcCardTotal","dealerCards","dealerTotalAlt","playerTotal","playerCards","playerTotalAlt","eleven","sum","Object","keys","reduce","total","card","cardVal","Number","cardValue","drawCards","numberOfCards","pop","push","checkForBust","t1","t2","min","status","gameMsg","makeBet","betVal","prevState","bet","chips","clearBet","dealClicked","isPlaying","hitClicked","checkDealerStatus","stayClicked","max","resetGame"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CardList from \"./components/cardlist\";\nimport Controls from \"./components/controls\";\nimport GameMessage from \"./components/gamemessage\";\nimport shuffle from \"./components/shuffle\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: [],\n      dealerTotal: 0,\n      dealerTotalAlt: 0,\n      dealerCards: [],\n      playerTotal: 0,\n      playerTotalAlt: 0,\n      playerCards: [],\n      bet: 0,\n      chips: 1000,\n      isPlaying: false,\n      gameMsg: null\n    };\n  }\n\n  // if less then 10 cards left suffle a new deck\n  shuffle = a => {\n    var k,\n      t,\n      j,\n      i = a.length,\n      rand = Math.random;\n\n    // For each element in the array, swap it with a random\n    // element (which might be itself)\n    while (i--) {\n      k = (rand() * (i + 1)) | 0;\n      t = a[k];\n      a[k] = a[i];\n      a[i] = t;\n    }\n    return a;\n  };\n\n  checkDeck = deck => {\n    return this.state.deck.length < 10 ? deck.concat(shuffle(cards)) : deck;\n  };\n\n  calcCards = () => {\n    this.setState({\n      dealerTotal: this.calcCardTotal(this.state.dealerCards, false),\n      dealerTotalAlt: this.calcCardTotal(this.state.dealerCards, true),\n      playerTotal: this.calcCardTotal(this.state.playerCards, false),\n      playerTotalAlt: this.calcCardTotal(this.state.playerCards, true)\n    });\n  };\n\n  calcCardTotal = (cards, eleven) => {\n    let sum = Object.keys(cards).reduce(function(total, card) {\n      let cardVal = Number(cards[card].cardValue);\n      cardVal = cardVal == 1 && eleven ? 11 : cardVal;\n      return Number(total) + cardVal;\n    }, 0);\n    return sum;\n  };\n\n  drawCards = (deck, playerCards, numberOfCards) => {\n    var i;\n    for (i = 1; i <= numberOfCards; i++) {\n      let card = deck.pop();\n      playerCards.push(card);\n    }\n    return playerCards;\n  };\n\n  //check if player bust\n  checkForBust = () => {\n    let t1,\n      t2,\n      min,\n      status = \"\";\n    t1 = this.calcCardTotal(this.state.playerCards, false);\n    t2 = this.calcCardTotal(this.state.playerCards, true);\n    min = Math.min(t1, t2);\n    if (min > 21) {\n      status = \"Player Bust!!!\";\n    }\n\n    this.setState({\n      gameMsg: status\n    });\n  };\n\n  makeBet = betVal => {\n    this.setState(prevState => ({\n      bet: prevState.bet + betVal,\n      chips: prevState.chips - betVal\n    }));\n  };\n\n  clearBet = () => {\n    this.setState(prevState => ({\n      bet: 0,\n      chips: prevState.chips + prevState.bet\n    }));\n  };\n\n  // Deal Cards\n  dealClicked = () => {\n    let deck = this.checkDeck(this.state.deck);\n    let dealerCards = this.state.dealerCards;\n    let playerCards = this.state.playerCards;\n\n    if (this.state.bet === 0) return;\n\n    this.drawCards(deck, dealerCards, 2);\n    this.drawCards(deck, playerCards, 2);\n\n    this.setState(\n      prevState => ({\n        deck: deck,\n        dealerCards: dealerCards,\n        playerCards: playerCards,\n        isPlaying: true\n      }),\n      this.calcCards()\n    );\n  };\n\n  hitClicked = () => {\n    let deck = this.checkDeck(this.state.deck);\n    let playerCards = this.state.playerCards;\n    this.drawCards(deck, playerCards, 1);\n\n    this.setState(\n      prevState => ({\n        playerCards: playerCards,\n        deck: deck\n      }),\n      this.calcCards(),\n      this.checkForBust()\n    );\n  };\n\n  checkDealerStatus = (dealerCards, playerTotal) => {\n    let t1,\n      t2,\n      status = \"\";\n\n    t1 = this.calcCardTotal(dealerCards, false);\n    t2 = this.calcCardTotal(dealerCards, true);\n\n    if (Math.min(t1, t2) > 21) {\n      status = \"Player Wins!!!\";\n    } else if (\n      (t1 <= 21 && t1 == playerTotal) ||\n      (t2 <= 21 && t2 == playerTotal)\n    ) {\n      status = \"Push\";\n    } else if (\n      (t1 <= 21 && t1 > playerTotal) ||\n      (t2 <= 21 && t2 > playerTotal)\n    ) {\n      status = \"Dealer wins!!!\";\n    }\n\n    return status;\n  };\n\n  stayClicked = () => {\n    //Draw dealer cards until value equals or is higher then user.\n    let playerTotal = Math.max(\n      this.state.playerTotal,\n      this.state.playerTotalAlt\n    );\n    if (playerTotal > 21)\n      playerTotal = Math.min(this.state.playerTotal, this.state.playerTotalAlt);\n    let deck = this.checkDeck(this.state.deck);\n    let dealerCards = this.state.dealerCards;\n    let status = this.checkDealerStatus(dealerCards, playerTotal);\n\n    if (status == \"\") {\n      do {\n        this.drawCards(deck, dealerCards, 1);\n        status = this.checkDealerStatus(dealerCards, playerTotal);\n      } while (status == \"\");\n    }\n\n    this.setState(\n      prevState => ({\n        deck: deck,\n        dealerCards: dealerCards,\n        gameMsg: status\n      }),\n      this.calcCards()\n    );\n  };\n\n  resetGame = () => {\n    let chips = this.state.chips;\n    let bet = this.state.bet;\n    debugger;\n    //Calculate chips\n    if (this.state.gameMsg === \"Push\") {\n      chips = chips + bet;\n    } else if (this.state.gameMsg === \"Player Wins!!!\") {\n      chips = chips + bet * 2;\n    }\n\n    this.setState({\n      deck: [],\n      dealerTotal: 0,\n      dealerTotalAlt: 0,\n      dealerCards: [],\n      playerTotal: 0,\n      playerTotalAlt: 0,\n      playerCards: [],\n      isPlaying: false,\n      bet: 0,\n      chips: chips,\n      gameMsg: null\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <CardList\n          cardDisplay=\"Dealer:\"\n          cardTotal={this.state.dealerTotal}\n          cardTotalAlt={this.state.dealerTotalAlt}\n          cards={this.state.dealerCards}\n        />\n        <CardList\n          cardDisplay=\"Player:\"\n          cardTotal={this.state.playerTotal}\n          cardTotalAlt={this.state.playerTotalAlt}\n          cards={this.state.playerCards}\n        />\n        <Controls\n          bet={this.state.bet}\n          chips={this.state.chips}\n          isPlaying={this.state.isPlaying}\n          makeBet={this.makeBet}\n          dealClicked={this.dealClicked}\n          hitClicked={this.hitClicked}\n          stayClicked={this.stayClicked}\n          clearBet={this.clearBet}\n        />\n        {this.state.gameMsg ? (\n          <GameMessage msg={this.state.gameMsg} resetClicked={this.resetGame} />\n        ) : (\n          false\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}